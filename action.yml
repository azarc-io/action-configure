name: 'Configure'
description: 'Checkout & Configure Requirements'
inputs:
  aws-access-key-id:
    required: true
    description: "The aws-access-key-id used to authenticate with AWS"
  aws-secret-access-key:
    required: true
    description: "The aws-secret-access-key used to authenticate with AWS"
  aws-region:
    required: true
    description: "The aws region to use"
    default: us-east-1
  aws-account-id:
    required: true
    description: "The aws account id used to authenticate with code artifact"
  repository-name:
    required: false
    description: "The name of the repository to create"
  registry:
    required: false
    description: "The registry to authenticate to"
  registry-user:
    required: false
    description: "The username used to authenticate with Nexus"
  registry-pass:
    required: false
    description: "The password used to authenticate with Nexus"
  cache-registry:
    required: false
    description: "The cache registry to authenticate to"
  cache-registry-user:
    required: false
    description: "The username used to authenticate with the caching registry"
  cache-registry-pass:
    required: false
    description: "The password used to authenticate with the caching registry"
  dockerhub-user:
    required: false
    description: "The username used to authenticate with Dockerhub"
  dockerhub-pass:
    required: false
    description: "The password used to authenticate with Dockerhub"
  npmrc-output-path:
    required: true
    description: "The path to write the .npmrc file to"
  npmrc-fontawesome-token:
    required: true
    description: "The token to add to the .npmrc that provides access to the fontawesome repository"
  use-sudo:
    required: false
    description: "True if sudo should be used when executing shell commands"
  jira-base-url:
    required: false
    description: "The base url for Jira"
  jira-user-email:
    required: false
    description: "The Jira user email address"
  jira-api-token:
    required: false
    description: "The Jira API token"
outputs:
  repository-uri:
    description: 'The docker registry to use'
    value: ${{ steps.ecr.outputs.repository-uri }}
runs:
  using: "composite"
  steps:
    - name: "Clean Workspace"
      shell: bash
      run: sudo find /home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}/. -name . -o -prune -exec rm -rf -- {} + || true
    - name: "Checkout"
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Configure Git"
      shell: bash
      run: |
        git config --global --add safe.directory /__w/verathread/verathread
        git config --global user.email "${{ github.event.pusher.email }}"
        git config --global user.name "${{ github.event.pusher.name }}"
    - name: "Download Latest Earthly"
      shell: bash
      run: |
        if [ ${{ inputs.use-sudo }} = true ] ; then
          sudo /bin/sh -c 'wget -q https://github.com/earthly/earthly/releases/download/v0.6.14/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'
        else
          /bin/sh -c 'wget -q https://github.com/earthly/earthly/releases/download/v0.6.14/earthly-linux-amd64 -O /usr/local/bin/earthly && chmod +x /usr/local/bin/earthly'
        fi
    - name: "Docker Registry Login"
      uses: docker/login-action@v2.0.0
      if: inputs.dockerhub-user != '' && inputs.dockerhub-pass != ''
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.registry-user }}
        password: ${{ inputs.registry-pass }}
    - name: "Dockerhub Registry Login"
      uses: docker/login-action@v2.0.0
      if: inputs.registry != ''
      with:
        username: ${{ inputs.dockerhub-user }}
        password: ${{ inputs.dockerhub-pass }}
    - name: "Cache Registry Login"
      uses: docker/login-action@v2.0.0
      if: inputs.cache-registry != ''
      with:
        registry: ${{ inputs.cache-registry }}
        username: ${{ inputs.cache-registry-user }}
        password: ${{ inputs.cache-registry-pass }}
    - name: "AWS Credentials"
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: us-east-1
    - name: "Login to Amazon ECR"
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: "AWS ECR Create Repo"
      id: ecr
      if: inputs.repository-name != ''
      uses: int128/create-ecr-repository-action@v1
      with:
        repository: ${{ inputs.repository-name }}
    - name: Login To Jira
      uses: atlassian/gajira-login@master
      if: inputs.jira_api_token != '' && inputs.jira_user_email != '' && inputs.jira_base_url != ''
      env:
        JIRA_BASE_URL: ${{ inputs.jira-base-url }}
        JIRA_USER_EMAIL: ${{ inputs.jira-user-email }}
        JIRA_API_TOKEN: ${{ inputs.jira-api-token }}
    - name: "Generate Code Artifact .npmrc Credentials"
      shell: bash
      if: inputs.npmrc-fontawesome-token != '' && inputs.npmrc-output-path != ''
      run: |
        cat <<EOF >> ${{ inputs.npmrc-output-path }}/.npmrc 
        @fortawesome:registry=https://npm.fontawesome.com/
        //npm.fontawesome.com/:always-auth=true
        //npm.fontawesome.com/:_authToken=${{ inputs.npmrc-fontawesome-token }}
        EOF
    - name: "Login To Code Artifact"
      uses: azarc-io/codeartifact@v0.0.2
      if: inputs.npmrc-output-path != ''
      id: configure
      with:
        region: ${{ inputs.aws-region }}
        domain: npm
        owner: ${{ inputs.aws-account-id }}
        type: npm
        repo: npm-store
        npmrc-output-path: ${{ inputs.npmrc-output-path }}
